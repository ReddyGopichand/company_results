import json
import requests
from bs4 import BeautifulSoup

def avg_f(l):
    if len(l) != 5:
        raise Exception("not 5")
    base = l[-2]
    recent_quarters = l[:3]
    if base == 0:
        return
    # if base > max(recent_quarters):
    #     return
    per_inc = [(q-base)/base for q in recent_quarters]
    return sum(per_inc)/len(per_inc)


def get_net_profit(html_string):
    # Parse the HTML string using BeautifulSoup
    soup = BeautifulSoup(html_string, 'html.parser')

    # Extract the contents of the element selector '#income_statement table tr'
    # table_rows = soup.select('#income_statement table tr')

    # print(table_rows)
    # # Print the contents of the table rows
    # for row in table_rows:
    #     print(row)
    tags = soup.select('#C-3-income-graphData')
    tag = tags[0]
    data = json.loads(tag.contents[0])
    return data['net-profit']

def get_company_scid(url):
    html = requests.get(url).text
    soup = BeautifulSoup(html, 'html.parser')
    tags = soup.select('#ap_sc_id')
    try:
        return tags[0].get_attribute_list('value')
    except:
        return 'gopi'

def get_companies(html_string):
    # Parse the HTML string using BeautifulSoup
    soup = BeautifulSoup(html_string, 'html.parser')

    # Extract the contents of the element selector '#income_statement table tr'
    # table_rows = soup.select('#income_statement table tr')

    # print(table_rows)
    # # Print the contents of the table rows
    # for row in table_rows:
    #     print(row)
    selector = '.scroll-pane.MT5'
    tags = soup.select(selector)
    todays, tomorrows = tags[0], tags[1]
    companies = []
    for anchor in tomorrows.select('table tr td:first-child a'):
        # code = anchor.get_attribute_list('href')[0].split('/')[-1]
        code = get_company_scid(anchor.get_attribute_list('href')[0])
        if type(code) == list:
            code = code[0]
        name = anchor.contents[0]
        companies.append((code,name))
        # print(code,name)
    return companies
    # return todays
    # data = json.loads(todays.contents[0])
    # print(data['net-profit'])

def get_url_content(url):
    # get_urls(open('response.html').read())
    # url = 'https://www.moneycontrol.com/india/stockpricequote/banks-private-sector/hdfcbank/HDF01'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            print(f'Response code {response.status_code}')
    except Exception as e:
        print(e)


def main():
    companies_url = 'https://www.moneycontrol.com/markets/earnings/?classic=true'
    result = []
    companies = get_companies(get_url_content(companies_url))
    print(len(companies),'companies')
    missed_companies = []
    neglected_companies = []
    for company_code, company_name in companies:
        url = 'https://www.moneycontrol.com/mc/widget/mcfinancials/getFinancialData?classic=true&referenceId=income&requestType=C&scId='+company_code+'&frequency=3'
        try:
            net_profit = [int(i) for i in get_net_profit(get_url_content(url))]
            avg_inc = avg_f(net_profit)
            if avg_inc:
                result.append((int(avg_inc*100),company_name))
            else:
                neglected_companies.append(company_name)
        except Exception as e:
            
           
            missed_companies.append(company_name)
    result.sort(reverse=True)
    print("missed",missed_companies)
    # print('neglected',neglected_companies)
    print(result)
main()
